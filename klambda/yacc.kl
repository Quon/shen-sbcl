"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4130) (cond ((and (cons? V4130) (and (= defcc (hd V4130)) (cons? (tl V4130)))) (shen.yacc->shen (hd (tl V4130)) (tl (tl V4130)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4133 V4134) (let CCRules (shen.split_cc_rules true V4134 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4133 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4136) (cond ((> (occurrences kill V4136) 0) (cons trap-error (cons V4136 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4136)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4138) (let String (error-to-string V4138) (if (= String "yacc kill") (fail) V4138)))

(defun shen.split_cc_rules (V4144 V4145 V4146) (cond ((and (= () V4145) (= () V4146)) ()) ((= () V4145) (cons (shen.split_cc_rule V4144 (reverse V4146) ()) ())) ((and (cons? V4145) (= ; (hd V4145))) (cons (shen.split_cc_rule V4144 (reverse V4146) ()) (shen.split_cc_rules V4144 (tl V4145) ()))) ((cons? V4145) (shen.split_cc_rules V4144 (tl V4145) (cons (hd V4145) V4146))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4154 V4155 V4156) (cond ((and (cons? V4155) (and (= := (hd V4155)) (and (cons? (tl V4155)) (= () (tl (tl V4155)))))) (cons (reverse V4156) (tl V4155))) ((and (cons? V4155) (and (= := (hd V4155)) (and (cons? (tl V4155)) (and (cons? (tl (tl V4155))) (and (= where (hd (tl (tl V4155)))) (and (cons? (tl (tl (tl V4155)))) (= () (tl (tl (tl (tl V4155))))))))))) (cons (reverse V4156) (cons (cons where (cons (hd (tl (tl (tl V4155)))) (cons (hd (tl V4155)) ()))) ()))) ((= () V4155) (do (shen.semantic-completion-warning V4154 V4156) (shen.split_cc_rule V4154 (cons := (cons (shen.default_semantics (reverse V4156)) ())) V4156))) ((cons? V4155) (shen.split_cc_rule V4154 (tl V4155) (cons (hd V4155) V4156))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4167 V4168) (cond ((= true V4167) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4168)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4170) (cond ((= () V4170) ()) ((and (cons? V4170) (and (= () (tl V4170)) (shen.grammar_symbol? (hd V4170)))) (hd V4170)) ((and (cons? V4170) (shen.grammar_symbol? (hd V4170))) (cons append (cons (hd V4170) (cons (shen.default_semantics (tl V4170)) ())))) ((cons? V4170) (cons cons (cons (hd V4170) (cons (shen.default_semantics (tl V4170)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4172) (and (symbol? V4172) (let Cs (shen.strip-pathname (explode V4172)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4174) (cond ((and (cons? V4174) (= () (tl V4174))) (hd V4174)) ((cons? V4174) (let P YaccParse (cons let (cons P (cons (hd V4174) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4174)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4176) (cond ((and (cons? V4176) (and (cons? (tl V4176)) (= () (tl (tl V4176))))) (shen.syntax (hd V4176) Stream (hd (tl V4176)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4180 V4181 V4182) (cond ((and (= () V4180) (and (cons? V4182) (and (= where (hd V4182)) (and (cons? (tl V4182)) (and (cons? (tl (tl V4182))) (= () (tl (tl (tl V4182))))))))) (cons if (cons (shen.semantics (hd (tl V4182))) (cons (cons shen.pair (cons (cons hd (cons V4181 ())) (cons (shen.semantics (hd (tl (tl V4182)))) ()))) (cons (cons fail ()) ()))))) ((= () V4180) (cons shen.pair (cons (cons hd (cons V4181 ())) (cons (shen.semantics V4182) ())))) ((cons? V4180) (if (shen.grammar_symbol? (hd V4180)) (shen.recursive_descent V4180 V4181 V4182) (if (variable? (hd V4180)) (shen.variable-match V4180 V4181 V4182) (if (shen.jump_stream? (hd V4180)) (shen.jump_stream V4180 V4181 V4182) (if (shen.terminal? (hd V4180)) (shen.check_stream V4180 V4181 V4182) (if (cons? (hd V4180)) (shen.list-stream (shen.decons (hd V4180)) (tl V4180) V4181 V4182) (simple-error (shen.app (hd V4180) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4187 V4188 V4189 V4190) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4189 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V4189 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4188 (cons shen.pair (cons (cons tl (cons (cons hd (cons V4189 ())) ())) (cons (cons hd (cons (cons tl (cons V4189 ())) ())) ()))) V4190) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4187 (cons shen.pair (cons (cons hd (cons (cons hd (cons V4189 ())) ())) (cons (cons hd (cons (cons tl (cons V4189 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4192) (cond ((and (cons? V4192) (and (= cons (hd V4192)) (and (cons? (tl V4192)) (and (cons? (tl (tl V4192))) (and (= () (hd (tl (tl V4192)))) (= () (tl (tl (tl V4192))))))))) (cons (hd (tl V4192)) ())) ((and (cons? V4192) (and (= cons (hd V4192)) (and (cons? (tl V4192)) (and (cons? (tl (tl V4192))) (= () (tl (tl (tl V4192)))))))) (cons (hd (tl V4192)) (shen.decons (hd (tl (tl V4192)))))) (true V4192)))

(defun shen.insert-runon (V4207 V4208 V4209) (cond ((and (cons? V4209) (and (= shen.pair (hd V4209)) (and (cons? (tl V4209)) (and (cons? (tl (tl V4209))) (and (= () (tl (tl (tl V4209)))) (= (hd (tl (tl V4209))) V4208)))))) V4207) ((cons? V4209) (map (lambda Z (shen.insert-runon V4207 V4208 Z)) V4209)) (true V4209)))

(defun shen.strip-pathname (V4215) (cond ((not (element? "." V4215)) V4215) ((cons? V4215) (shen.strip-pathname (tl V4215))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4219 V4220 V4221) (cond ((cons? V4219) (let Test (cons (hd V4219) (cons V4220 ())) (let Action (shen.syntax (tl V4219) (concat Parse_ (hd V4219)) V4221) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4219)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4219)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4225 V4226 V4227) (cond ((cons? V4225) (let Test (cons cons? (cons (cons hd (cons V4226 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4225)) (cons (cons hd (cons (cons hd (cons V4226 ())) ())) (cons (shen.syntax (tl V4225) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4226 ())) ())) (cons (cons shen.hdtl (cons V4226 ())) ()))) V4227) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4237) (cond ((cons? V4237) false) ((variable? V4237) false) (true true)))

(defun shen.jump_stream? (V4243) (cond ((= V4243 _) true) (true false)))

(defun shen.check_stream (V4247 V4248 V4249) (cond ((cons? V4247) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4248 ())) ())) (cons (cons = (cons (hd V4247) (cons (cons hd (cons (cons hd (cons V4248 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V4247) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4248 ())) ())) (cons (cons shen.hdtl (cons V4248 ())) ()))) V4249) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4253 V4254 V4255) (cond ((cons? V4253) (let Test (cons cons? (cons (cons hd (cons V4254 ())) ())) (let Action (shen.syntax (tl V4253) (cons shen.pair (cons (cons tl (cons (cons hd (cons V4254 ())) ())) (cons (cons shen.hdtl (cons V4254 ())) ()))) V4255) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4257) (cond ((= () V4257) ()) ((shen.grammar_symbol? V4257) (cons shen.hdtl (cons (concat Parse_ V4257) ()))) ((variable? V4257) (concat Parse_ V4257)) ((cons? V4257) (map (lambda Z (shen.semantics Z)) V4257)) (true V4257)))

(defun shen.snd-or-fail (V4265) (cond ((and (cons? V4265) (and (cons? (tl V4265)) (= () (tl (tl V4265))))) (hd (tl V4265))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V4268 V4269) (cons V4268 (cons V4269 ())))

(defun shen.hdtl (V4271) (hd (tl V4271)))

(defun <!> (V4279) (cond ((and (cons? V4279) (and (cons? (tl V4279)) (= () (tl (tl V4279))))) (cons () (cons (hd V4279) ()))) (true (fail))))

(defun <e> (V4285) (cond ((and (cons? V4285) (and (cons? (tl V4285)) (= () (tl (tl V4285))))) (cons (hd V4285) (cons () ()))) (true (shen.f_error <e>))))



