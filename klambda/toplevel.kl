"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V3790) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3792) (cond ((= () V3792) ()) ((and (cons? V3792) (cons? (tl V3792))) (do (set (hd V3792) (hd (tl V3792))) (shen.multiple-set (tl (tl V3792))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3794) (declare V3794 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3806 V3807) (cond ((and (tuple? V3806) (and (cons? (snd V3806)) (element? (hd (snd V3806)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3806) (tl (snd V3806))) V3807)) ((and (tuple? V3806) (and (cons? (snd V3806)) (and (cons? (tl (snd V3806))) (and (= () (tl (tl (snd V3806)))) (and (cons? V3807) (and (= (hd (snd V3806)) (shen.exclamation)) (= (hd (tl (snd V3806))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3807))) (hd V3807))) ((and (tuple? V3806) (and (cons? (snd V3806)) (= (hd (snd V3806)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3806)) V3807) (let Find (head (shen.find-past-inputs Key? V3807)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3806) (and (cons? (snd V3806)) (and (= () (tl (snd V3806))) (= (hd (snd V3806)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3807) 0) (abort))) ((and (tuple? V3806) (and (cons? (snd V3806)) (= (hd (snd V3806)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3806)) V3807) (let Pastprint (shen.print-past-inputs Key? (reverse V3807) 0) (abort)))) (true V3806)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3809) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3809) (nl 1)))

(defun shen.update_history (V3812 V3813) (set shen.*history* (cons V3812 V3813)))

(defun shen.toplineread () (shen.toplineread_loop (read-byte (stinput)) ()))

(defun shen.toplineread_loop (V3817 V3818) (cond ((= V3817 (shen.hat)) (simple-error "line read aborted")) ((element? V3817 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3818 (lambda E shen.nextline)) (let It (shen.record-it V3818) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-byte (stinput)) (append V3818 (cons V3817 ()))) (@p Line V3818))))) (true (shen.toplineread_loop (read-byte (stinput)) (append V3818 (cons V3817 ()))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3824) (cond ((= + V3824) (set shen.*tc* true)) ((= - V3824) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3826) (shen.toplevel_evaluate V3826 (value shen.*tc*)))

(defun shen.find-past-inputs (V3829 V3830) (let F (shen.find V3829 V3830) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3833 V3834) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3833 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3834)))) (lambda X (shen.prefix? V3833 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3836) (cond ((and (cons? V3836) (= (hd V3836) (shen.space))) (shen.trim-gubbins (tl V3836))) ((and (cons? V3836) (= (hd V3836) (shen.newline))) (shen.trim-gubbins (tl V3836))) ((and (cons? V3836) (= (hd V3836) (shen.carriage-return))) (shen.trim-gubbins (tl V3836))) ((and (cons? V3836) (= (hd V3836) (shen.tab))) (shen.trim-gubbins (tl V3836))) ((and (cons? V3836) (= (hd V3836) (shen.left-round))) (shen.trim-gubbins (tl V3836))) (true V3836)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3845 V3846) (cond ((= () V3846) ()) ((and (cons? V3846) (V3845 (hd V3846))) (cons (hd V3846) (shen.find V3845 (tl V3846)))) ((cons? V3846) (shen.find V3845 (tl V3846))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V3860 V3861) (cond ((= () V3860) true) ((and (cons? V3860) (and (cons? V3861) (= (hd V3861) (hd V3860)))) (shen.prefix? (tl V3860) (tl V3861))) (true false)))

(defun shen.print-past-inputs (V3873 V3874 V3875) (cond ((= () V3874) _) ((and (cons? V3874) (not (V3873 (hd V3874)))) (shen.print-past-inputs V3873 (tl V3874) (+ V3875 1))) ((and (cons? V3874) (tuple? (hd V3874))) (do (shen.prhush (shen.app V3875 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V3874))) (shen.print-past-inputs V3873 (tl V3874) (+ V3875 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V3878 V3879) (cond ((and (cons? V3878) (and (cons? (tl V3878)) (and (= : (hd (tl V3878))) (and (cons? (tl (tl V3878))) (and (= () (tl (tl (tl V3878)))) (= true V3879)))))) (shen.typecheck-and-evaluate (hd V3878) (hd (tl (tl V3878))))) ((and (cons? V3878) (cons? (tl V3878))) (do (shen.toplevel_evaluate (cons (hd V3878) ()) V3879) (do (nl 1) (shen.toplevel_evaluate (tl V3878) V3879)))) ((and (cons? V3878) (and (= () (tl V3878)) (= true V3879))) (shen.typecheck-and-evaluate (hd V3878) (gensym A))) ((and (cons? V3878) (and (= () (tl V3878)) (= false V3879))) (let Eval (shen.eval-without-macros (hd V3878)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V3882 V3883) (let Typecheck (shen.typecheck V3882 V3883) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V3882) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V3885) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V3885) V3885))

(defun shen.extract-pvars (V3891) (cond ((shen.pvar? V3891) (cons V3891 ())) ((cons? V3891) (union (shen.extract-pvars (hd V3891)) (shen.extract-pvars (tl V3891)))) (true ())))

(defun shen.mult_subst (V3899 V3900 V3901) (cond ((= () V3899) V3901) ((= () V3900) V3901) ((and (cons? V3899) (cons? V3900)) (shen.mult_subst (tl V3899) (tl V3900) (subst (hd V3899) (hd V3900) V3901))) (true (shen.f_error shen.mult_subst))))



