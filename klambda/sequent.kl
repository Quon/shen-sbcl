"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2430) (cond ((and (cons? V2430) (and (cons? (tl V2430)) (= () (tl (tl V2430))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2430)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2432) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2432) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2432) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2434) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2434) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2434) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2436) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2436) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2436) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2438) (let YaccParse (if (and (cons? (hd V2438)) (= if (hd (hd V2438)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2438)) (shen.hdtl V2438))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2438)) (= let (hd (hd V2438)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2438)) (shen.hdtl V2438))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2440) (if (cons? (hd V2440)) (let Parse_X (hd (hd V2440)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2440)) (shen.hdtl V2440))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2442) (if (cons? (hd V2442)) (let Parse_X (hd (hd V2442)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2442)) (shen.hdtl V2442))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2444) (cond ((and (cons? V2444) (and (cons? (tl V2444)) (and (cons? (tl (tl V2444))) (and (= () (tl (tl (tl V2444)))) (= (hd (tl V2444)) bar!))))) (cons (hd V2444) (hd (tl (tl V2444))))) ((cons? V2444) (cons (shen.remove-bar (hd V2444)) (shen.remove-bar (tl V2444)))) (true V2444)))

(defun shen.<premises> (V2446) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2446) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2446) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2448) (if (cons? (hd V2448)) (let Parse_X (hd (hd V2448)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2448)) (shen.hdtl V2448))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2450) (let YaccParse (if (and (cons? (hd V2450)) (= ! (hd (hd V2450)))) (shen.pair (hd (shen.pair (tl (hd V2450)) (shen.hdtl V2450))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2450) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2450) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2452) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2452) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2452) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2455 V2456) (@p V2455 V2456))

(defun shen.<formulae> (V2458) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2458) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2458) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2458) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2460) (if (cons? (hd V2460)) (let Parse_X (hd (hd V2460)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2460)) (shen.hdtl V2460))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2462) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2462) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2462) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2464) (let Parse_shen.<expr> (shen.<expr> V2464) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2466) (if (cons? (hd V2466)) (let Parse_X (hd (hd V2466)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2466)) (shen.hdtl V2466))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2468) (if (cons? (hd V2468)) (let Parse_X (hd (hd V2468)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2468)) (shen.hdtl V2468))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2470) (and (symbol? V2470) (shen.sh? (str V2470))))

(defun shen.sh? (V2472) (cond ((= "_" V2472) true) (true (and (= (pos V2472 0) "_") (shen.sh? (tlstr V2472))))))

(defun shen.doubleunderline? (V2474) (and (symbol? V2474) (shen.dh? (str V2474))))

(defun shen.dh? (V2476) (cond ((= "=" V2476) true) (true (and (= (pos V2476 0) "=") (shen.dh? (tlstr V2476))))))

(defun shen.process-datatype (V2479 V2480) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2479 V2480))))

(defun shen.remember-datatype (V2486) (cond ((cons? V2486) (do (set shen.*datatypes* (adjoin (hd V2486) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2486) (value shen.*alldatatypes*))) (hd V2486)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2491 V2492) (cond ((= () V2492) ()) ((and (cons? V2492) (and (tuple? (hd V2492)) (= shen.single (fst (hd V2492))))) (cons (shen.rule->horn-clause V2491 (snd (hd V2492))) (shen.rules->horn-clauses V2491 (tl V2492)))) ((and (cons? V2492) (and (tuple? (hd V2492)) (= shen.double (fst (hd V2492))))) (shen.rules->horn-clauses V2491 (append (shen.double->singles (snd (hd V2492))) (tl V2492)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2494) (cons (shen.right-rule V2494) (cons (shen.left-rule V2494) ())))

(defun shen.right-rule (V2496) (@p shen.single V2496))

(defun shen.left-rule (V2498) (cond ((and (cons? V2498) (and (cons? (tl V2498)) (and (cons? (tl (tl V2498))) (and (tuple? (hd (tl (tl V2498)))) (and (= () (fst (hd (tl (tl V2498))))) (= () (tl (tl (tl V2498))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2498)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2498))) Q) ()) (@p shen.single (cons (hd V2498) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2504) (cond ((and (tuple? V2504) (= () (fst V2504))) (snd V2504)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2507 V2508) (cond ((and (cons? V2508) (and (cons? (tl V2508)) (and (cons? (tl (tl V2508))) (and (tuple? (hd (tl (tl V2508)))) (= () (tl (tl (tl V2508)))))))) (cons (shen.rule->horn-clause-head V2507 (snd (hd (tl (tl V2508))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2508) (hd (tl V2508)) (fst (hd (tl (tl V2508))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2511 V2512) (cons V2511 (cons (shen.mode-ify V2512) (cons Context_1957 ()))))

(defun shen.mode-ify (V2514) (cond ((and (cons? V2514) (and (cons? (tl V2514)) (and (= : (hd (tl V2514))) (and (cons? (tl (tl V2514))) (= () (tl (tl (tl V2514)))))))) (cons mode (cons (cons (hd V2514) (cons : (cons (cons mode (cons (hd (tl (tl V2514))) (cons + ()))) ()))) (cons - ())))) (true V2514)))

(defun shen.rule->horn-clause-body (V2518 V2519 V2520) (let Variables (map (lambda X (shen.extract_vars X)) V2520) (let Predicates (map (lambda X (gensym shen.cl)) V2520) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2520 Variables) (let SideLiterals (shen.construct-side-literals V2518) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2520))) V2519) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2529 V2530 V2531 V2532) (cond ((and (= () V2529) (= () V2530)) ()) (true (shen.csl-help V2529 V2530 V2531 V2532))))

(defun shen.csl-help (V2539 V2540 V2541 V2542) (cond ((and (= () V2539) (= () V2540)) (cons (cons bind (cons ContextOut_1957 (cons V2541 ()))) ())) ((and (cons? V2539) (cons? V2540)) (cons (cons (hd V2539) (cons V2541 (cons V2542 (hd V2540)))) (shen.csl-help (tl V2539) (tl V2540) V2542 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2546 V2547 V2548) (cond ((and (= () V2546) (and (= () V2547) (= () V2548))) shen.skip) ((and (cons? V2546) (and (cons? V2547) (cons? V2548))) (do (shen.construct-search-clause (hd V2546) (hd V2547) (hd V2548)) (shen.construct-search-clauses (tl V2546) (tl V2547) (tl V2548)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2552 V2553 V2554) (shen.s-prolog (cons (shen.construct-base-search-clause V2552 V2553 V2554) (cons (shen.construct-recursive-search-clause V2552 V2553 V2554) ()))))

(defun shen.construct-base-search-clause (V2558 V2559 V2560) (cons (cons V2558 (cons (cons (shen.mode-ify V2559) In_1957) (cons In_1957 V2560))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2564 V2565 V2566) (cons (cons V2564 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2566))) (cons :- (cons (cons (cons V2564 (cons Assumptions_1957 (cons Out_1957 V2566))) ()) ()))))

(defun shen.construct-side-literals (V2572) (cond ((= () V2572) ()) ((and (cons? V2572) (and (cons? (hd V2572)) (and (= if (hd (hd V2572))) (and (cons? (tl (hd V2572))) (= () (tl (tl (hd V2572)))))))) (cons (cons when (tl (hd V2572))) (shen.construct-side-literals (tl V2572)))) ((and (cons? V2572) (and (cons? (hd V2572)) (and (= let (hd (hd V2572))) (and (cons? (tl (hd V2572))) (and (cons? (tl (tl (hd V2572)))) (= () (tl (tl (tl (hd V2572)))))))))) (cons (cons is (tl (hd V2572))) (shen.construct-side-literals (tl V2572)))) ((cons? V2572) (shen.construct-side-literals (tl V2572))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2579 V2580) (cond ((tuple? V2579) (cons shen.t* (cons (shen.recursive_cons_form (snd V2579)) (cons (shen.construct-context V2580 (fst V2579)) ())))) ((= ! V2579) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2583 V2584) (cond ((and (= true V2583) (= () V2584)) Context_1957) ((and (= false V2583) (= () V2584)) ContextOut_1957) ((cons? V2584) (cons cons (cons (shen.recursive_cons_form (hd V2584)) (cons (shen.construct-context V2583 (tl V2584)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2586) (cond ((cons? V2586) (cons cons (cons (shen.recursive_cons_form (hd V2586)) (cons (shen.recursive_cons_form (tl V2586)) ())))) (true V2586)))

(defun preclude (V2588) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2588)))

(defun shen.preclude-h (V2590) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2590)) (value shen.*datatypes*)))

(defun include (V2592) (shen.include-h (map (lambda X (shen.intern-type X)) V2592)))

(defun shen.include-h (V2594) (let ValidTypes (intersection V2594 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2596) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2596))))

(defun include-all-but (V2598) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2598))))

(defun shen.synonyms-help (V2604) (cond ((= () V2604) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2604) (cons? (tl V2604))) (let Vs (difference (shen.extract_vars (hd (tl V2604))) (shen.extract_vars (hd V2604))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2604) (cons (hd (tl V2604)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2604)))) (shen.free_variable_warnings (hd (tl V2604)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2607 V2608) (if (element? V2607 (value V2608)) (value V2608) (set V2608 (cons V2607 (value V2608)))))

(defun shen.demod-rule (V2610) (cond ((and (cons? V2610) (and (cons? (tl V2610)) (= () (tl (tl V2610))))) (cons (shen.rcons_form (hd V2610)) (cons -> (cons (shen.rcons_form (hd (tl V2610))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2616) (cond ((and (cons? V2616) (and (= defun (hd V2616)) (and (cons? (tl V2616)) (and (cons? (tl (tl V2616))) (and (cons? (hd (tl (tl V2616)))) (and (= () (tl (hd (tl (tl V2616))))) (and (cons? (tl (tl (tl V2616)))) (= () (tl (tl (tl (tl V2616)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2616)))) (tl (tl (tl V2616))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2619 V2620) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2620 (shen.default-rule))))))) (do (if V2619 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



